"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@oclif/core/lib/errors");
const chalk = require("chalk");
const core_1 = require("@oclif/core");
const config_1 = require("./config");
const axios_1 = require("axios");
const authUtils_1 = require("./authUtils");
class Auth {
    constructor(options) {
        this.secureStore = options === null || options === void 0 ? void 0 : options.secureStore;
        this.config = new config_1.default();
    }
    // 1. If env vars are set, prepare token using them
    // 2. If no env vars, check if current profile is set
    async getAuthorizationToken() {
        const { ZENDESK_EMAIL, ZENDESK_PASSWORD, ZENDESK_API_TOKEN, ZENDESK_OAUTH_TOKEN } = process.env;
        if (ZENDESK_OAUTH_TOKEN) {
            return `Bearer ${ZENDESK_OAUTH_TOKEN}`;
        }
        else if (ZENDESK_EMAIL && ZENDESK_API_TOKEN) {
            return this.createBasicAuthToken(`${ZENDESK_EMAIL}/token`, ZENDESK_API_TOKEN);
        }
        else if (ZENDESK_EMAIL && ZENDESK_PASSWORD) {
            return this.createBasicAuthToken(ZENDESK_EMAIL, ZENDESK_PASSWORD);
        }
        else {
            const profile = await this.getLoggedInProfile();
            if (profile && this.secureStore) {
                const authToken = await this.secureStore.getPassword(profile.subdomain);
                return authToken;
            }
            return undefined;
        }
    }
    createBasicAuthToken(email, passwordOrToken) {
        const plainToken = Buffer.from(`${email}:${passwordOrToken}`);
        return `Basic ${plainToken.toString('base64')}`;
    }
    getLoggedInProfile() {
        return this.config.getConfig('activeProfile');
    }
    setLoggedInProfile(subdomain) {
        return this.config.setConfig('activeProfile', { subdomain });
    }
    async loginInteractively(options) {
        const subdomain = (0, authUtils_1.parseSubdomain)((options === null || options === void 0 ? void 0 : options.subdomain) || await core_1.CliUx.ux.prompt('Subdomain'));
        const email = await core_1.CliUx.ux.prompt('Email');
        const password = await core_1.CliUx.ux.prompt('Password', { type: 'hide' });
        const authToken = this.createBasicAuthToken(email, password);
        const testAuth = await axios_1.default.get(`https://${subdomain}.zendesk.com/api/v2/account/settings.json`, {
            headers: { Authorization: authToken },
            validateStatus: function (status) { return status < 500; }
        });
        if (testAuth.status === 200 && this.secureStore) {
            await this.secureStore.setPassword(subdomain, authToken);
            await this.setLoggedInProfile(subdomain);
            return true;
        }
        return false;
    }
    async logout() {
        if (!this.secureStore) {
            throw new errors_1.CLIError(chalk.red('Secure credentials store not found.'));
        }
        const profile = await this.getLoggedInProfile();
        if (!(profile === null || profile === void 0 ? void 0 : profile.subdomain))
            throw new errors_1.CLIError(chalk.red('Failed to log out: no active profile found.'));
        await this.config.removeConfig('activeProfile');
        const deleted = await this.secureStore.deletePassword(profile.subdomain);
        if (!deleted)
            throw new errors_1.CLIError(chalk.red('Failed to log out: Account, Service not found.'));
        return true;
    }
    async getSavedProfiles() {
        return this.secureStore && this.secureStore.getAllCredentials();
    }
}
exports.default = Auth;
