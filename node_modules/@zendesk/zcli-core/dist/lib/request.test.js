"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("@oclif/test");
const request_1 = require("./request");
const auth_1 = require("./auth");
describe('requestAPI', () => {
    test_1.test
        .env({
        ZENDESK_SUBDOMAIN: 'z3ntest',
        ZENDESK_EMAIL: 'test@zendesk.com',
        ZENDESK_API_TOKEN: '123456'
    })
        .stub(auth_1.default, 'getAuthorizationToken', () => Promise.resolve('token'))
        .nock('https://z3ntest.zendesk.com', api => {
        api
            .get('/api/v2/me')
            .reply(function () {
            (0, test_1.expect)(this.req.headers.authorization).to.equal('Basic dGVzdEB6ZW5kZXNrLmNvbS90b2tlbjoxMjM0NTY=');
            return [200];
        });
    })
        .do(async () => {
        await (0, request_1.requestAPI)('api/v2/me', { method: 'GET' });
    })
        .it('should make a request with Auth token');
    test_1.test
        .env({
        ZENDESK_SUBDOMAIN: 'z3ntest',
        ZENDESK_EMAIL: 'test@zendesk.com',
        ZENDESK_API_TOKEN: '123456'
    })
        .stub(auth_1.default, 'getAuthorizationToken', () => Promise.resolve('token'))
        .nock('https://z3ntest.zendesk.com', api => {
        api
            .get('/api/v2/me')
            .reply(function () {
            (0, test_1.expect)(this.req.headers.authorization).to.equal('Basic dGVzdEB6ZW5kZXNrLmNvbS90b2tlbjoxMjM0NTY=');
            (0, test_1.expect)(this.req.headers.foo).to.equal('bar');
            return [200];
        });
    })
        .do(async () => {
        await (0, request_1.requestAPI)('api/v2/me', {
            headers: { foo: 'bar' },
            method: 'GET'
        });
    })
        .it('should be able to attach extra headers to request');
});
