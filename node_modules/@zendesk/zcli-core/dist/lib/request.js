"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestAPI = void 0;
const axios_1 = require("axios");
const secureStore_1 = require("./secureStore");
const auth_1 = require("./auth");
const errors_1 = require("@oclif/core/lib/errors");
const chalk = require("chalk");
const env_1 = require("./env");
const requestUtils_1 = require("./requestUtils");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const requestAPI = async (url, options = {}, json = false) => {
    let auth;
    if ((0, env_1.varExists)(env_1.EnvVars.SUBDOMAIN, env_1.EnvVars.EMAIL, env_1.EnvVars.PASSWORD) ||
        (0, env_1.varExists)(env_1.EnvVars.SUBDOMAIN, env_1.EnvVars.EMAIL, env_1.EnvVars.API_TOKEN) ||
        (0, env_1.varExists)(env_1.EnvVars.SUBDOMAIN, env_1.EnvVars.OAUTH_TOKEN)) {
        auth = new auth_1.default();
    }
    else {
        const secureStore = new secureStore_1.default();
        await secureStore.loadKeytar();
        auth = new auth_1.default({ secureStore });
    }
    const authToken = await auth.getAuthorizationToken();
    const subdomain = process.env[env_1.EnvVars.SUBDOMAIN] || (await (0, requestUtils_1.getSubdomain)(auth));
    if (options.headers) {
        options.headers = Object.assign({ Authorization: authToken }, options.headers);
    }
    else {
        options.headers = { Authorization: authToken };
    }
    if (authToken && subdomain) {
        return axios_1.default.request(Object.assign({ baseURL: `https://${subdomain}.zendesk.com`, url: url, validateStatus: function (status) { return status < 500; } }, options));
    }
    throw new errors_1.CLIError(chalk.red('Authorization Failed, try logging in via `zcli login -i`!'));
};
exports.requestAPI = requestAPI;
