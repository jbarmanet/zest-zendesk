"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const appConfig = require("./appConfig");
const test_1 = require("@oclif/test");
const fs = require("fs-extra");
const chalk = require("chalk");
const path = require("path");
describe('getAllConfigs', () => {
    let spyFilePath;
    const appPath = './appPath1';
    const configFilePath = path.join('appPath1', 'zcli.apps.config.json');
    test_1.test
        .stub(fs, 'existsSync', () => true)
        .stub(fs, 'readFileSync', (...args) => {
        spyFilePath = args[0];
        return JSON.stringify({ plan: 'silver' });
    })
        .it('should return a JSON object with zcli.apps.config.json file contents', () => {
        (0, test_1.expect)(appConfig.getAllConfigs(appPath, 'zcli.apps.config.json')).to.deep.equal({ plan: 'silver' });
        (0, test_1.expect)(spyFilePath).to.equal(configFilePath);
    });
    test_1.test
        .stub(fs, 'existsSync', () => false)
        .it('should return undefined', () => {
        (0, test_1.expect)(appConfig.getAllConfigs(appPath, 'zcli.apps.config.json')).to.be.an('undefined');
    });
    test_1.test
        .stub(fs, 'existsSync', () => true)
        .stub(fs, 'readFileSync', () => {
        Error('bad json');
    })
        .it('should return undefined and trigger a CLIError', () => {
        (0, test_1.expect)(() => {
            appConfig.getAllConfigs(appPath, 'zcli.apps.config.json');
        }).to.throw(chalk.red(`zcli configuration file was malformed at path: ${configFilePath}`));
    });
});
describe('setConfig', () => {
    let spyFileJson;
    const appPath = 'appPath1';
    const configFileJson = { plan: 'silver', table: 'tennis' };
    test_1.test
        .stub(path, 'resolve', (...args) => {
        return args[0];
    })
        .stub(fs, 'pathExists', () => true)
        .stub(fs, 'readJson', () => {
        return { plan: 'silver' };
    })
        .stub(fs, 'outputJson', (...args) => {
        spyFileJson = args[1];
    })
        .it('should store key to zcli.apps.config.json file contents', async () => {
        await appConfig.setConfig('table', 'tennis', appPath);
        (0, test_1.expect)(spyFileJson).to.deep.equal(configFileJson);
    });
});
