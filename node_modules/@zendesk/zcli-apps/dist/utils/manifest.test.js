"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("@oclif/test");
const manifest_1 = require("./manifest");
const path = require("path");
const fs = require("fs");
describe('getManifestFile', () => {
    let spyFilePath;
    const manifestFilePath = path.join('appPath1', 'manifest.json');
    test_1.test
        .stub(fs, 'existsSync', () => true)
        .stub(fs, 'readFileSync', (...args) => {
        spyFilePath = args[0];
        return JSON.stringify({ name: 'xman' });
    })
        .it('should return a JSON object with manifest.json file contents', () => {
        (0, test_1.expect)((0, manifest_1.getManifestFile)('./appPath1')).to.deep.equal({ name: 'xman' });
        (0, test_1.expect)(spyFilePath).to.equal(manifestFilePath);
    });
});
describe('updateManifestFile', () => {
    let spyFilePath;
    let spyFileContent;
    const manifestFilePath = path.join('appPath1', 'manifest.json');
    const manifestContent = {
        author: {
            name: 'name',
            email: 'test@email.com'
        },
        defaultLocale: 'en',
        location: {},
        frameworkVersion: '2.0'
    };
    test_1.test
        .stub(fs, 'existsSync', () => true)
        .stub(fs, 'writeFileSync', (...args) => {
        spyFilePath = args[0];
        spyFileContent = args[1];
    })
        .it('should write a JSON object into manifest.json file contents', () => {
        (0, manifest_1.updateManifestFile)('./appPath1', manifestContent);
        (0, test_1.expect)(spyFilePath).to.equal(manifestFilePath);
        (0, test_1.expect)(spyFileContent).to.equal(JSON.stringify(manifestContent, null, 2));
    });
});
