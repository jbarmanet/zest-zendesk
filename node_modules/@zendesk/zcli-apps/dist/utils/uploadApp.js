"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateProductInstallation = exports.getUploadJobStatus = void 0;
const appConfig_1 = require("../utils/appConfig");
const zcli_core_1 = require("@zendesk/zcli-core");
const getAppSettings_1 = require("./getAppSettings");
const getUploadJobStatus = async (job_id, appPath, pollAfter = 1000) => new Promise((resolve, reject) => {
    const polling = setInterval(async () => {
        const res = await zcli_core_1.request.requestAPI(`api/v2/apps/job_statuses/${job_id}`, { method: 'GET' });
        const { status, message, app_id } = await res.data;
        if (status === 'completed') {
            clearInterval(polling);
            (0, appConfig_1.setConfig)('app_id', app_id, appPath);
            resolve({ status, message, app_id });
        }
        else if (status === 'failed') {
            clearInterval(polling);
            reject(message);
        }
    }, pollAfter);
});
exports.getUploadJobStatus = getUploadJobStatus;
const updateProductInstallation = async (appConfig, manifest, app_id, product) => {
    const installationResp = await zcli_core_1.request.requestAPI(`/api/${product}/apps/installations.json`, {}, true);
    const installations = installationResp.data;
    const configParams = (appConfig === null || appConfig === void 0 ? void 0 : appConfig.parameters) || {}; // if there are no parameters in the config, just attach an empty object
    const settings = manifest.parameters ? await (0, getAppSettings_1.getAppSettings)(manifest, configParams) : {};
    const installation_id = installations.installations.filter(i => i.app_id === app_id)[0].id;
    const updated = await zcli_core_1.request.requestAPI(`/api/${product}/apps/installations/${installation_id}.json`, {
        method: 'PUT',
        data: JSON.stringify({ settings: Object.assign({ name: manifest.name }, settings) }),
        headers: {
            'Content-Type': 'application/json'
        }
    });
    if (updated.status === 201 || updated.status === 200) {
        return true;
    }
    else {
        return false;
    }
};
exports.updateProductInstallation = updateProductInstallation;
