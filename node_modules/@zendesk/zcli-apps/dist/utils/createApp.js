"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProductInstallation = exports.deployApp = exports.promptAndGetSettings = exports.uploadAppPkg = exports.getManifestAppName = void 0;
const fs = require("fs-extra");
const FormData = require("form-data");
const manifest_1 = require("../utils/manifest");
const zcli_core_1 = require("@zendesk/zcli-core");
const core_1 = require("@oclif/core");
const getManifestAppName = (appPath) => {
    return (0, manifest_1.getManifestFile)(appPath).name;
};
exports.getManifestAppName = getManifestAppName;
const uploadAppPkg = async (pkgPath) => {
    const formData = new FormData();
    const pkgBuffer = fs.createReadStream(pkgPath);
    formData.append('uploaded_data', pkgBuffer);
    const response = await zcli_core_1.request.requestAPI('api/v2/apps/uploads.json', {
        data: formData,
        method: 'POST'
    });
    // clean up
    await fs.remove(pkgPath);
    return response.data;
};
exports.uploadAppPkg = uploadAppPkg;
const promptAndGetSettings = async (params, appName = 'app', valuesRequired = true) => {
    const settings = {};
    for (const param of params) {
        const value = await core_1.CliUx.ux.prompt(`Enter ${appName} setting.${param.name} value`, { type: param.secure ? 'hide' : 'normal', required: valuesRequired });
        if (value)
            settings[param.name] = value;
    }
    return settings;
};
exports.promptAndGetSettings = promptAndGetSettings;
const deployApp = async (method, url, upload_id, appName) => {
    let installationPayload;
    if (appName) {
        installationPayload = { upload_id, name: appName };
    }
    else {
        installationPayload = { upload_id };
    }
    const installationOptions = {
        data: JSON.stringify(installationPayload),
        method,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
        }
    };
    const installationResponse = await zcli_core_1.request.requestAPI(url, installationOptions);
    return installationResponse.data;
};
exports.deployApp = deployApp;
const createProductInstallation = async (settings, manifest, app_id, product) => {
    const installResponse = await zcli_core_1.request.requestAPI(`api/${product}/apps/installations.json`, {
        method: 'POST',
        data: JSON.stringify({ app_id: `${app_id}`, settings: Object.assign({ name: manifest.name }, settings) }),
        headers: {
            'Content-Type': 'application/json'
        }
    });
    if (installResponse.status === 201 || installResponse.status === 200) {
        return true;
    }
    else {
        return false;
    }
};
exports.createProductInstallation = createProductInstallation;
