"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const chalk = require("chalk");
const semver = require("semver");
const manifest_1 = require("../../utils/manifest");
const appPath_1 = require("../../lib/appPath");
class Bump extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(Bump);
        const { major, minor } = flags;
        const appPath = args.appPath || './';
        (0, appPath_1.validateAppPath)(appPath);
        try {
            const manifest = (0, manifest_1.getManifestFile)(appPath);
            const version = manifest.version || '';
            if (!semver.valid(version)) {
                this.error(chalk.red(`${manifest.version} is not a valid semantic version`));
            }
            if (major) {
                manifest.version = semver.inc(version, 'major');
            }
            else if (minor) {
                manifest.version = semver.inc(version, 'minor');
            }
            else {
                manifest.version = semver.inc(version, 'patch');
            }
            (0, manifest_1.updateManifestFile)(appPath, manifest);
            this.log(chalk.green(`Successfully bumped app version to: ${manifest.version}`));
        }
        catch (error) {
            this.error(chalk.red(error));
        }
    }
}
exports.default = Bump;
Bump.description = 'bumps the version of your app in the manifest file. Accepts major, minor and patch; defaults to patch.';
Bump.args = [
    { name: 'appPath' }
];
Bump.examples = [
    '$ zcli apps:bump ./repl-app2',
    '$ zcli apps:bump -M ./repl-app2',
    '$ zcli apps:bump -m ./repl-app2',
    '$ zcli apps:bump -p ./repl-app2'
];
Bump.flags = {
    major: core_1.Flags.boolean({ char: 'M', description: 'Increments the major version by 1' }),
    minor: core_1.Flags.boolean({ char: 'm', description: 'Increments the minor version by 1' }),
    patch: core_1.Flags.boolean({ char: 'p', description: 'Increments the patch version by 1' })
};
