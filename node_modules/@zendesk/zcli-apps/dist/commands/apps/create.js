"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const createApp_1 = require("../../utils/createApp");
const chalk = require("chalk");
const uploadApp_1 = require("../../utils/uploadApp");
const manifest_1 = require("../../utils/manifest");
const package_1 = require("../../lib/package");
const appPath_1 = require("../../lib/appPath");
const appConfig_1 = require("../../utils/appConfig");
const getAppSettings_1 = require("../../utils/getAppSettings");
class Create extends core_1.Command {
    async run() {
        const { argv: appDirectories } = await this.parse(Create);
        for (const appPath of appDirectories) {
            (0, appPath_1.validateAppPath)(appPath);
            core_1.CliUx.ux.action.start('Uploading app');
            const manifest = (0, manifest_1.getManifestFile)(appPath);
            const pkgPath = await (0, package_1.createAppPkg)(appPath);
            const { id: upload_id } = await (0, createApp_1.uploadAppPkg)(pkgPath);
            if (!upload_id) {
                core_1.CliUx.ux.action.stop('Failed');
                this.error(`Failed to upload app ${manifest.name}`);
            }
            core_1.CliUx.ux.action.stop('Uploaded');
            core_1.CliUx.ux.action.start('Deploying app');
            const { job_id } = await (0, createApp_1.deployApp)('POST', 'api/apps.json', upload_id, manifest.name);
            try {
                const { app_id } = await (0, uploadApp_1.getUploadJobStatus)(job_id, appPath);
                core_1.CliUx.ux.action.stop('Deployed');
                const allConfigs = (0, appConfig_1.getAllConfigs)(appPath);
                const configParams = (allConfigs === null || allConfigs === void 0 ? void 0 : allConfigs.parameters) || {}; // if there are no parameters in the config, just attach an empty object
                const settings = manifest.parameters ? await (0, getAppSettings_1.getAppSettings)(manifest, configParams) : {};
                Object.keys(manifest.location).forEach(async (product) => {
                    if (!(0, createApp_1.createProductInstallation)(settings, manifest, app_id, product)) {
                        this.error(chalk.red(`Failed to install ${manifest.name} with app_id: ${app_id}`));
                    }
                });
                this.log(chalk.green(`Successfully installed app: ${manifest.name} with app_id: ${app_id}`));
            }
            catch (error) {
                core_1.CliUx.ux.action.stop('Failed');
                this.error(chalk.red(error));
            }
        }
    }
}
exports.default = Create;
Create.description = 'creates apps in your desired target account';
Create.args = [
    { name: 'appDirectories', required: true, default: '.' }
];
Create.examples = [
    '$ zcli apps:create ./app',
    '$ zcli apps:create ./app1 ./app2'
];
Create.strict = false;
