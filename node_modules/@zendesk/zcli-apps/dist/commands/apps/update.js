"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const appConfig_1 = require("../../utils/appConfig");
const errors_1 = require("@oclif/core/lib/errors");
const chalk = require("chalk");
const uploadApp_1 = require("../../utils/uploadApp");
const createApp_1 = require("../../utils/createApp");
const manifest_1 = require("../../utils/manifest");
const package_1 = require("../../lib/package");
const appPath_1 = require("../../lib/appPath");
class Update extends core_1.Command {
    getAppID(appPath) {
        const allConfigs = (0, appConfig_1.getAllConfigs)(appPath);
        const app_id = allConfigs ? allConfigs.app_id : undefined;
        if (!app_id) {
            throw new errors_1.CLIError(chalk.red('App ID not found'));
        }
        return app_id;
    }
    async installApp(appConfig, uploadId, appPath, manifest) {
        core_1.CliUx.ux.action.start('Deploying app');
        const { job_id } = await (0, createApp_1.deployApp)('PUT', `api/v2/apps/${appConfig.app_id}`, uploadId);
        try {
            const { app_id } = await (0, uploadApp_1.getUploadJobStatus)(job_id, appPath);
            core_1.CliUx.ux.action.stop('Deployed');
            Object.keys(manifest.location).forEach(async (product) => {
                if (!(0, uploadApp_1.updateProductInstallation)(appConfig, manifest, app_id, product)) {
                    this.error(chalk.red(`Failed to update ${manifest.name} with app_id: ${app_id}`));
                }
            });
            this.log(chalk.green(`Successfully updated app: ${manifest.name} with app_id: ${app_id}`));
        }
        catch (error) {
            core_1.CliUx.ux.action.stop('Failed');
            this.error(chalk.red(error));
        }
    }
    async run() {
        const { argv: appDirectories } = await this.parse(Update);
        for (const appPath of appDirectories) {
            (0, appPath_1.validateAppPath)(appPath);
            core_1.CliUx.ux.action.start('Uploading app');
            const appConfig = (0, appConfig_1.getAllConfigs)(appPath) || {};
            const manifest = (0, manifest_1.getManifestFile)(appPath);
            const pkgPath = await (0, package_1.createAppPkg)(appPath);
            const { id: upload_id } = await (0, createApp_1.uploadAppPkg)(pkgPath);
            if (!upload_id) {
                core_1.CliUx.ux.action.stop('Failed');
                this.error(`Failed to upload app ${manifest.name}`);
            }
            core_1.CliUx.ux.action.stop('Uploaded');
            try {
                await this.installApp(appConfig, upload_id, appPath, manifest);
            }
            catch (error) {
                this.error(chalk.red(error));
            }
        }
    }
}
exports.default = Update;
Update.description = 'updates an existing private app in the Zendesk products specified in the apps manifest file.';
Update.args = [
    { name: 'appDirectories', required: true, default: '.' }
];
Update.strict = false;
