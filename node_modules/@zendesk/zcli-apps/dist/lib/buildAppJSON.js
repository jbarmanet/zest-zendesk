"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAppJSON = exports.getAppPayloadFromManifest = exports.getInstallation = exports.getLocationIcons = exports.getIconsByProduct = exports.getAppAssetsURLPrefix = void 0;
const path = require("path");
const fs = require("fs");
const uuid_1 = require("../utils/uuid");
const manifest_1 = require("../utils/manifest");
const appConfig_1 = require("../utils/appConfig");
const getAppSettings_1 = require("../utils/getAppSettings");
const appPath_1 = require("./appPath");
// The SVGs here are in the top bar or nav bar locations. Chat donâ€™t have these locations thus not here.
const ICON_LOCATION_ALLOWLIST = {
    support: ['top_bar', 'nav_bar', 'system_top_bar', 'ticket_editor'],
    sell: ['top_bar']
};
const getAppAssetsURLPrefix = (port, appID) => `http://localhost:${port}/${appID}/assets/`;
exports.getAppAssetsURLPrefix = getAppAssetsURLPrefix;
const isMultiProductApp = (location) => {
    return Object.keys(location).length > 1;
};
const getIconsByProduct = (product, locations, manifestLocations, appPath) => Object
    .entries(locations)
    .filter(([location]) => ICON_LOCATION_ALLOWLIST[product] && ICON_LOCATION_ALLOWLIST[product].includes(location))
    .reduce((productLocationIcons, [location]) => {
    const svgPath = isMultiProductApp(manifestLocations) ? `${product}/icon_${location}.svg` : `icon_${location}.svg`;
    if (fs.existsSync(path.join(appPath, 'assets', svgPath)))
        productLocationIcons[location] = { svg: svgPath };
    return productLocationIcons;
}, {});
exports.getIconsByProduct = getIconsByProduct;
const getLocationIcons = (appPath, manifestLocations) => {
    return Object
        .entries(manifestLocations)
        .reduce((locationIcons, [product, locations]) => {
        locationIcons[product] = (0, exports.getIconsByProduct)(product, locations, manifestLocations, appPath);
        return locationIcons;
    }, {});
};
exports.getLocationIcons = getLocationIcons;
const getInstallation = (appId, app, configFileContents, appSettings) => {
    const installationId = configFileContents.installation_id || (0, uuid_1.uuidV4)();
    return {
        app_id: appId,
        name: app.name,
        collapsible: true,
        enabled: true,
        id: installationId,
        plan: configFileContents.plan,
        requirements: [],
        settings: [
            { title: app.name },
            ...appSettings
        ],
        updated_at: new Date().toISOString()
    };
};
exports.getInstallation = getInstallation;
const mergeLocationAndIcons = (locations, locationIcons) => {
    for (const product in locationIcons) {
        for (const locationName in locationIcons[product]) {
            if (typeof (locations[product][locationName]) === 'string') {
                locations[product][locationName] = {
                    url: locations[product][locationName]
                };
            }
            if (locationIcons[product][locationName].svg) {
                locations[product][locationName].svg = locationIcons[product][locationName].svg;
            }
            if (locationIcons[product][locationName].active) {
                locations[product][locationName].active = locationIcons[product][locationName].active;
            }
            if (locationIcons[product][locationName].inactive) {
                locations[product][locationName].inactive = locationIcons[product][locationName].inactive;
            }
            if (locationIcons[product][locationName].hover) {
                locations[product][locationName].hover = locationIcons[product][locationName].hover;
            }
        }
    }
    // Handle the case where an app installation location is not an object but is a string,
    for (const product in locations) {
        for (const locationName in locations[product]) {
            if (typeof (locations[product][locationName]) === 'string') {
                locations[product][locationName] = {
                    url: locations[product][locationName]
                };
            }
        }
    }
    return locations;
};
const getAppPayloadFromManifest = (appManifest, port, appID, locationIcons) => {
    return {
        name: appManifest.name,
        id: appID,
        default_locale: appManifest.defaultLocale,
        locations: mergeLocationAndIcons(appManifest.location, locationIcons),
        asset_url_prefix: (0, exports.getAppAssetsURLPrefix)(port, appID),
        single_install: appManifest.singleInstall,
        signed_urls: appManifest.signedUrls,
        version: appManifest.version,
        framework_version: appManifest.frameworkVersion
    };
};
exports.getAppPayloadFromManifest = getAppPayloadFromManifest;
const getSettingsArr = (appSettings) => {
    const s = [];
    Object.keys(appSettings).forEach((settingName) => {
        const setting = {};
        setting[settingName] = appSettings[settingName];
        s.push(setting);
    });
    return s;
};
const buildAppJSON = async (appPaths, port) => {
    var _a;
    const appJSON = { apps: [], installations: [] };
    for (const appPath of appPaths) {
        (0, appPath_1.validateAppPath)(appPath);
        const manifest = (0, manifest_1.getManifestFile)(appPath);
        const zcliConfigFile = (0, appConfig_1.getAllConfigs)(appPath) || {};
        const appId = ((_a = zcliConfigFile.app_id) === null || _a === void 0 ? void 0 : _a.toString()) || (0, uuid_1.uuidV4)();
        const configParams = zcliConfigFile.parameters || {}; // if there are no parameters in the config, just attach an empty object
        const appSettings = await (0, getAppSettings_1.getAppSettings)(manifest, configParams);
        const appSettingsArr = getSettingsArr(appSettings);
        const locationIcons = (0, exports.getLocationIcons)(appPath, manifest.location);
        const app = (0, exports.getAppPayloadFromManifest)(manifest, port, appId, locationIcons);
        const installation = (0, exports.getInstallation)(appId, app, zcliConfigFile, appSettingsArr);
        appJSON.apps.push(app);
        appJSON.installations.push(installation);
    }
    return appJSON;
};
exports.buildAppJSON = buildAppJSON;
