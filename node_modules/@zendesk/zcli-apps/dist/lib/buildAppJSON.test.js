"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const appConfig = require("../utils/appConfig");
const test_1 = require("@oclif/test");
const fs = require("fs");
const sinon = require("sinon");
const uuid = require("../utils/uuid");
const buildAppJSON = require("./buildAppJSON");
const appPath = require("../lib/appPath");
const manifest = require("../utils/manifest");
const path = require("path");
const manifestOutput = {
    name: 'app 1',
    author: {
        name: 'name',
        email: 'test@email.com'
    },
    defaultLocale: 'en',
    location: {
        sell: {
            top_bar: 'assets/iframe.html'
        },
        support: {
            ticket_editor: 'assets/iframe.html',
            nav_bar: 'assets/iframe.html'
        }
    },
    singleInstall: true,
    signedUrls: false,
    frameworkVersion: '2.0',
    parameters: [{
            name: 'someToken',
            type: 'text',
            secure: true
        }, {
            name: 'salesForceId',
            type: 'number',
            secure: false
        }]
};
const manifestOutputNoParams = {
    name: 'app 1',
    author: {
        name: 'name',
        email: 'test@email.com'
    },
    defaultLocale: 'en',
    location: {
        sell: {
            top_bar: 'assets/iframe.html'
        },
        support: {
            ticket_editor: 'assets/iframe.html',
            nav_bar: 'assets/iframe.html'
        }
    },
    singleInstall: true,
    signedUrls: false,
    frameworkVersion: '2.0'
};
const multiProductLocations = {
    sell: {
        top_bar: {
            url: 'assets/iframe.html',
            svg: 'sell/icon_top_bar.svg'
        }
    },
    support: {
        ticket_editor: {
            url: 'assets/iframe.html',
            svg: 'support/icon_ticket_editor.svg'
        },
        nav_bar: {
            url: 'assets/iframe.html',
            svg: 'support/icon_nav_bar.svg'
        }
    }
};
const multiProductLocationIcons = {
    sell: {
        top_bar: {
            svg: 'sell/icon_top_bar.svg'
        }
    },
    support: {
        nav_bar: {
            svg: 'support/icon_nav_bar.svg'
        },
        ticket_editor: {
            svg: 'support/icon_ticket_editor.svg'
        }
    }
};
const singleProductLocationIcons = {
    support: {
        nav_bar: {
            svg: 'icon_nav_bar.svg'
        },
        ticket_editor: {
            svg: 'icon_ticket_editor.svg'
        }
    }
};
const singleProductLocation = {
    support: {
        ticket_editor: 'assets/iframe.html',
        nav_bar: 'assets/iframe.html'
    }
};
const singleProductLocations = {
    support: {
        ticket_editor: {
            url: 'assets/iframe.html',
            svg: 'icon_ticket_editor.svg'
        },
        nav_bar: {
            url: 'assets/iframe.html',
            svg: 'icon_nav_bar.svg'
        }
    }
};
const multiProductAppPath = path.join(process.cwd(), 'packages', '/zcli-apps/tests/functional/mocks/multi_product_app');
const singleProductAppPath = path.join(process.cwd(), 'packages', '/zcli-apps/tests/functional/mocks/single_product_app');
describe('getIconsByProduct', () => {
    const product = 'support';
    const locations = {
        nav_bar: 'assets/iframe.html',
        top_bar: 'assets/iframe.html'
    };
    const manifestLocations = {
        support: {
            nav_bar: 'assets/iframe.html',
            top_bar: 'assets/iframe.html'
        }
    };
    describe('when svg exists at path', () => {
        test_1.test
            .stub(fs, 'existsSync', () => true)
            .it('should return an object with icons per location', () => {
            (0, test_1.expect)(buildAppJSON.getIconsByProduct(product, locations, manifestLocations, './appPath1')).to.deep.equal({
                nav_bar: {
                    svg: 'icon_nav_bar.svg'
                },
                top_bar: {
                    svg: 'icon_top_bar.svg'
                }
            });
        });
    });
    describe('when svg does not exist at path', () => {
        test_1.test
            .stub(fs, 'existsSync', () => false)
            .it('should return an empty object', () => {
            (0, test_1.expect)(buildAppJSON.getIconsByProduct(product, locations, manifestLocations, './appPath1')).to.deep.equal({});
        });
    });
});
describe('getAppAssetsURLPrefix', () => {
    const port = 1234;
    const appID = '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed';
    const url = `http://localhost:${port}/${appID}/assets/`;
    it('should return a URL with correct port and appID', () => {
        (0, test_1.expect)(buildAppJSON.getAppAssetsURLPrefix(port, appID)).to.eq(url);
    });
});
describe('getAppPayloadFromManifest', () => {
    it('generate app payload from manifest', () => {
        const appPayload = buildAppJSON.getAppPayloadFromManifest(manifestOutput, 4567, '123', multiProductLocationIcons);
        (0, test_1.expect)(appPayload).to.deep.equal({
            name: 'app 1',
            id: '123',
            default_locale: 'en',
            locations: multiProductLocations,
            asset_url_prefix: 'http://localhost:4567/123/assets/',
            version: undefined,
            single_install: true,
            signed_urls: false,
            framework_version: '2.0'
        });
    });
});
describe('getLocationIcons', () => {
    it('should return expected locationIcons object for multi product app', () => {
        (0, test_1.expect)(buildAppJSON.getLocationIcons(multiProductAppPath, manifestOutput.location)).to.deep.equal(multiProductLocationIcons);
    });
    it('should return expected locationIcons object for single product app', () => {
        (0, test_1.expect)(buildAppJSON.getLocationIcons(singleProductAppPath, singleProductLocation)).to.deep.equal(singleProductLocationIcons);
    });
});
describe('getInstallation', () => {
    before(function () {
        this.clock = sinon.useFakeTimers(new Date('2020-01-01'));
    });
    after(function () {
        this.clock.restore();
    });
    test_1.test
        .it('should return installation object', () => {
        const app = {
            name: 'app 1',
            id: '123',
            default_locale: 'en',
            locations: singleProductLocations,
            asset_url_prefix: '/app/assets',
            framework_version: '2.0'
        };
        const parameters = [{
                someToken: 'fksjdhfb231435'
            }, {
                salesForceId: 123
            }];
        (0, test_1.expect)(buildAppJSON.getInstallation('123', app, { plan: 'silver' }, parameters))
            .to.deep.contain({
            app_id: '123',
            name: 'app 1',
            collapsible: true,
            enabled: true,
            plan: 'silver',
            requirements: [],
            settings: [{
                    title: 'app 1'
                }, {
                    someToken: 'fksjdhfb231435'
                }, {
                    salesForceId: 123
                }],
            updated_at: '2020-01-01T00:00:00.000Z'
        });
    });
});
describe('buildAppJSON', () => {
    before(function () {
        this.clock = sinon.useFakeTimers(new Date('2020-01-01'));
    });
    after(function () {
        this.clock.restore();
    });
    const mockId = '1';
    test_1.test
        .stub(appPath, 'validateAppPath', () => { }) // eslint-disable-line @typescript-eslint/no-empty-function
        .stub(manifest, 'getManifestFile', () => manifestOutput)
        .stub(appConfig, 'getAllConfigs', () => ({
        app_id: '234',
        plan: 'silver',
        parameters: {
            someToken: 'fksjdhfb231435',
            salesForceId: 123
        }
    }))
        .stub(uuid, 'uuidV4', () => mockId)
        .stub(buildAppJSON, 'getLocationIcons', () => { return multiProductLocationIcons; })
        .it('should return a JSON object with zcli.apps.config.json file contents', async () => {
        const appJSON = await buildAppJSON.buildAppJSON(['./app1'], 1234);
        (0, test_1.expect)(appJSON).to.deep.include({
            apps: [
                {
                    asset_url_prefix: 'http://localhost:1234/234/assets/',
                    default_locale: 'en',
                    framework_version: '2.0',
                    locations: multiProductLocations,
                    name: 'app 1',
                    id: '234',
                    signed_urls: false,
                    single_install: true,
                    version: undefined
                }
            ],
            installations: [
                {
                    app_id: '234',
                    collapsible: true,
                    enabled: true,
                    id: mockId,
                    name: 'app 1',
                    plan: 'silver',
                    requirements: [],
                    settings: [{
                            title: 'app 1'
                        }, {
                            someToken: 'fksjdhfb231435'
                        }, {
                            salesForceId: 123
                        }],
                    updated_at: '2020-01-01T00:00:00.000Z'
                }
            ]
        });
    });
    describe('with no params attribute on manifest file', () => {
        test_1.test
            .stub(appPath, 'validateAppPath', () => { }) // eslint-disable-line @typescript-eslint/no-empty-function
            .stub(manifest, 'getManifestFile', () => manifestOutputNoParams)
            .stub(appConfig, 'getAllConfigs', () => ({
            app_id: '234',
            plan: 'silver',
            parameters: {
                someToken: 'fksjdhfb231435',
                salesForceId: 123
            }
        }))
            .stub(uuid, 'uuidV4', () => mockId)
            .stub(buildAppJSON, 'getLocationIcons', () => { return multiProductLocationIcons; })
            .it('should return a JSON object with zcli.apps.config.json file contents', async () => {
            const appJSON = await buildAppJSON.buildAppJSON(['./app1'], 1234);
            (0, test_1.expect)(appJSON).to.deep.include({
                apps: [
                    {
                        asset_url_prefix: 'http://localhost:1234/234/assets/',
                        default_locale: 'en',
                        framework_version: '2.0',
                        locations: multiProductLocations,
                        name: 'app 1',
                        id: '234',
                        signed_urls: false,
                        single_install: true,
                        version: undefined
                    }
                ],
                installations: [
                    {
                        app_id: '234',
                        collapsible: true,
                        enabled: true,
                        id: mockId,
                        name: 'app 1',
                        plan: 'silver',
                        requirements: [],
                        settings: [{
                                title: 'app 1'
                            }],
                        updated_at: '2020-01-01T00:00:00.000Z'
                    }
                ]
            });
        });
    });
});
