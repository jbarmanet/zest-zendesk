"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePkg = exports.createAppPkg = void 0;
const path = require("path");
const fs = require("fs-extra");
const FormData = require("form-data");
const zcli_core_1 = require("@zendesk/zcli-core");
const errors_1 = require("@oclif/core/lib/errors");
const archiver = require("archiver");
const appPath_1 = require("./appPath");
const getDateTimeFileName = () => (new Date()).toISOString().replace(/[^0-9]/g, '');
const createAppPkg = async (relativeAppPath, pkgDir = 'tmp') => {
    const appPath = path.resolve(relativeAppPath);
    (0, appPath_1.validateAppPath)(appPath);
    const pkgName = `app-${getDateTimeFileName()}`;
    const pkgPath = `${appPath}/${pkgDir}/${pkgName}.zip`;
    await fs.ensureDir(`${appPath}/${pkgDir}`);
    const output = fs.createWriteStream(pkgPath);
    const archive = archiver('zip');
    archive.pipe(output);
    // ignore tmp dir
    archive.glob('**', {
        cwd: appPath,
        ignore: ['tmp/**']
    });
    await archive.finalize();
    if (!fs.pathExistsSync(pkgPath)) {
        throw new errors_1.CLIError(`Failed to create package at ${pkgPath}`);
    }
    return pkgPath;
};
exports.createAppPkg = createAppPkg;
const validatePkg = async (pkgPath) => {
    if (!fs.pathExistsSync(pkgPath)) {
        throw new errors_1.CLIError(`Package not found at ${pkgPath}`);
    }
    const form = new FormData();
    form.append('file', fs.createReadStream(pkgPath));
    const res = await zcli_core_1.request.requestAPI('api/v2/apps/validate', {
        method: 'POST',
        data: form
    });
    if (res.status !== 200) {
        const { description } = await res.data;
        throw new errors_1.CLIError(description);
    }
    return true;
};
exports.validatePkg = validatePkg;
